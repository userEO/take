#数据库驱动配置
#实体类配置
#mybatis.type-aliases-package=com.eo.demo.User
#驱动类，自动识别，可以注释
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#常用配置jdbc:mysql://localhost:3306/eo_daren?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=Asia/Shanghai
spring.datasource.url=jdbc:mysql://localhost:3306/eo_daren?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=Asia/Shanghai
spring.datasource.username=root
#生产密码是 201909 本地是 jweodr
spring.datasource.password=jweodr
#spring.datasource.password=201909
#数据库连接池如果不配置，有默认配置(com.zaxxer.hikari.HikariDataSouce)
#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#控制台打印sql语句，可以直接看到sql的完整语句
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
##添加自定义静态扫描文件夹 访问不需要在前面加 这个文件夹目录
#注意：如果不使用springboot默认的文件夹，自己添加自定义扫描文件夹,那么默认的文件夹的文件将不会被扫描
#spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/public/,classpath:/bootstrapview/,classpath:/templates/
spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/bootstrapview/,classpath:/public/,classpath:/public/templates
#编码格式
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
server.tomcat.uri-encoding=UTF-8
server.port=80
#thymeleaf配置
#是否开启缓存，建议本地改为false，生产改为true
spring.thymeleaf.cache=false
spring.thymeleaf.mode=HTML
#前置
spring.thymeleaf.prefix=classpath:/templates/
#后缀
spring.thymeleaf.suffix=.html
#编码
spring.thymeleaf.encoding=UTF-8
#类型
spring.thymeleaf.servlet.content-type=text/html
#redis配置+redis的配置可以不加，有默认配置，有需要加上会覆盖配置========================================
spring.redis.database=0
spring.netty.port=12131
spring.redis.host=localhost
#为了方便，现在腾讯服务器的redis
#spring.redis.host=148.70.195.135
spring.redis.port=6379
#spring.redis.cluster.nodes=127.0.0.1:20001,127.0.0.1:20002,127.0.0.1:20003,127.0.0.1:20004,127.0.0.1:20005,127.0.0.1:20006
#redis线程池设置
spring.redis.jedis.pool.max-idle=8
#reddis最小空闲连接数 默认为0
spring.redis.jedis.pool.min-idle=1
#如果赋值为-1，表示不限制，pool已经分配maxActive个jedis实例，
spring.redis.jedis.pool.max-active=2000
#等待可用连接最大时间，单位毫秒，默认为-1，表示永不超时
spring.redis.jedis.pool.max-wait=1000
#redis配置结束========================================
#【Kafka集群】========================================
spring.kafka.bootstrap-servers=127.0.0.1:9092,127.0.0.1:9093
###########【初始化生产者配置】###########
# 重试次数
spring.kafka.producer.retries=0
# 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
spring.kafka.producer.acks=1
# 批量大小
spring.kafka.producer.batch-size=16384
# 提交延时
spring.kafka.producer.properties.linger.ms=0
# 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka
# linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了
# 生产端缓冲区大小
spring.kafka.producer.buffer-memory=33554432
# Kafka提供的序列化和反序列化类
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# 自定义分区器  需要自己实现类才可以
spring.kafka.producer.properties.partitioner.class=take.kafka.CustomizePartitioner
###########【初始化消费者配置】###########
# 默认的消费组ID
spring.kafka.consumer.properties.group.id=defaultConsumerGroup
# 是否自动提交offset
spring.kafka.consumer.enable-auto-commit=true
# 提交offset延时(接收到消息后多久提交offset)
spring.kafka.consumer.auto.commit.interval.ms=1000
# 当kafka中没有初始offset或offset超出范围时将自动重置offset
# earliest:重置为分区中最小的offset;
# latest:重置为分区中最新的offset(消费分区中新产生的数据);
# none:只要有一个分区不存在已提交的offset,就抛出异常;
spring.kafka.consumer.auto-offset-reset=latest
# 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
spring.kafka.consumer.properties.session.timeout.ms=120000
# 消费请求超时时间
spring.kafka.consumer.properties.request.timeout.ms=180000
# Kafka提供的序列化和反序列化类
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# 消费端监听的topic不存在时，项目启动会报错(关掉)
spring.kafka.listener.missing-topics-fatal=false
# 设置批量消费
# spring.kafka.listener.type=batch
# 批量消费每次最多消费多少条消息
# spring.kafka.consumer.max-poll-records=50
#【Kafka集群】结束========================================